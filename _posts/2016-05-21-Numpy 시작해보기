---
layout: post
title:  "Numpy 시작해보기"
date:   2016-05-20
---

기계 학습을 공부하면서 이번에 새로 Numpy를 시작하게 되었다.

* a powerful N-dimensional array object
* sophisticated (broadcasting) functions
* tools for integrating C/C++ and Fortran code
* useful linear algebra, Fourier transform, and random number capabilities

다 차원 배열과 수학 계산에 유용한 모듈이라고 생각하면 될 것 같다.

### 1. 시작해보기

	pip3 install numpy
	
위의 명령어를 치면 numpy 가 설치된다. 파이썬이 설치되어있다면 이제 준비는 끝이다. 나는 Jupyter Notebook 을 설치해서  했다.

### 2. 기초 다져보기

	# numpy를 사용하기 위해 모듈을 가져온다.
	import numpy as np
	
기본적으로 이렇게 한다고 **카더라.** 공식 레퍼런스에도 이렇게 되어있다.

	a = np.array([[1, 2, 3, 4], [1, 2, 3, 4]])
	
	# a의 type과 값을 출력시켜본다.
	print(type(a))
	print(a)
	
	<class 'numpy.ndarray'>
	[[1 2 3 4]
 	[1 2 3 4]]
 	
다음과 같이 생성된다. 우리는 방금 N-차원의 배열을 생성한 것이다. 이런 식으로도 생성이 가능하다.

	a = np.arange(15).reshape(3, 5)
	print(a)
	
	[[ 0  1  2  3  4]
	 [ 5  6  7  8  9]
	 [10 11 12 13 14]]

꽤나 쉽게 생성이 가능한 것을 확인할 수 있다. 

행과 열의 수가 궁금하다면 다음과 같은 메서드를 사용하면 된다

	a.shape
	
	(3, 5)
	
방금 우리는 a의 행렬이 3행 5열인 것을 확인하였다. 랜덤으로 숫자를 넣고 싶다면 다음과 같이 하면 된다.

	a = np.random.random((4,4))
	print(a)
	
	[[ 0.80789167  0.61111229  0.98378827  0.14873413]
	 [ 0.19396963  0.5816223   0.22469463  0.88143221]
	 [ 0.55410629  0.86515518  0.20168016  0.07614765]
	 [ 0.35000308  0.94018832  0.34578849  0.97816344]]
	 
이제 이 행렬의 덧셈 연산을 해보자. 우리가 numpy 를 사용하지 않을 때는 반복문을 이용하여 구현해야한다. 하지만 numpy 는 간편하게 구현 할 수 있다.

일단 a, b의 행렬을 랜덤으로 생성해보자.

	a = np.random.random((4,4))
	b = np.random.random((4,4))
	print(a, b)
	
	[[ 0.79701505  0.00336293  0.36362785  0.55701001]
	 [ 0.324653    0.69283706  0.34007461  0.60028843]
	 [ 0.80942249  0.09517055  0.61906301  0.54307752]
	 [ 0.39524607  0.13732532  0.63990614  0.0144445 ]]
	
	[[ 0.22630596  0.50959016  0.91490822  0.07492848]
	 [ 0.0484234   0.48599428  0.46895616  0.62594867]
	 [ 0.11527778  0.67934908  0.32526294  0.88167721]
	 [ 0.38936248  0.10018635  0.85806067  0.40461323]]

생성하였고 이제 더해보자.

	print(a + b)
	print(np.add(a, b))
	
	[[ 1.02332101  0.51295309  1.27853608  0.63193849]
	 [ 0.3730764   1.17883134  0.80903077  1.22623711]
	 [ 0.92470028  0.77451963  0.94432595  1.42475473]
	 [ 0.78460856  0.23751167  1.49796681  0.41905772]]

성공적으로 값이 나온다. 이런 식으로 우리가 일상적으로 사용하는 연산자로 연산이 가능하다. 메서드를 이용해서 한다면 add, subtract, multiply, divide 를 사용하면 되며 각각 더하기, 뺄셈, 곱하기, 나누기이다.

방금 우리는 행렬 각각의 요소의 연산을 진행해보았다. 이제 벡터의 연산을 해보자.

	v = np.array([1,2])
	w = np.array([4, 12])
	
다음과 같이 선언하였다. v와 w 벡터의 내적을 구하기 위해선 다음과 같이 한다.

	# 벡터의 내적 구하기
	np.dot(v, w)
	
	28


이정도가 기본적인 것들인 것 같다. 열심히 더 공부하자!

